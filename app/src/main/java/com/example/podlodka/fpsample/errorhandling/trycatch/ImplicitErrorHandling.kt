package com.example.podlodka.fpsample.errorhandling.trycatch

fun implicitErrorHandlingExample() {
  val inputs = listOf("user_id:123", "user_id:abc", "user_id:-5", "–Ω–µ–≤–µ—Ä–Ω—ã–π_—Ñ–æ—Ä–º–∞—Ç")
  for (input in inputs) {
    try {
      val id = getUserIdFromString(input)
      println("‚úîÔ∏è –ù–∞–π–¥–µ–Ω ID: $id\n")
    } catch (e: Exception) {
      // –í–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –≤—Å—ë, –Ω–æ —Ç–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
      println("‚ùå –í–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–π–º–∞–ª –æ—à–∏–±–∫—É: ${e.message}\n")
    }
  }
}

private class InvalidFormatException(message: String) : IllegalArgumentException(message)
private class NegativeIdException(message: String) : IllegalArgumentException(message)

private fun getUserIdFromString(input: String): Int {
  println("‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É '$input'")
  try {
    val parts = input.split(':')
    if (parts.size != 2 || parts[0] != "user_id") {
      throw InvalidFormatException(
        message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å 'user_id:–ß–ò–°–õ–û'."
      )
    }
    val idStr = parts[1]
    val userId = idStr.toInt()

    if (userId < 0) {
      throw NegativeIdException(
        message = "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, –ø–æ–ª—É—á–µ–Ω–æ: $userId."
      )
    }
    println("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
    return userId
  } catch (e: NumberFormatException) {
    println("üî• –û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
    throw IllegalStateException(
      "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", e
    )
  } catch (e: InvalidFormatException) {
    println("üî• ${e.message}")
    throw e
  } catch (e: NegativeIdException) {
    println("üî• ${e.message}")
    throw e
  } finally {
    println("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è '$input'.\n")
  }
}